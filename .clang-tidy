---
Checks:          '-*,-clang-analyzer-osx.*,readability-redundant-*,misc-*,cert-*,performance-*,boost-*,modernize-*,cppcoreguidelies-*,google-*,clang-diagnostic-*,clang-analyzer-*,'
WarningsAsErrors: ''
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
CheckOptions:
  # finds anonymous namespaces in headers
  - key:             google-build-namespaces.HeaderFileExtensions
    value:           h,hh,hpp,hxx

  # Flag global namespace pollution in header files. Right now it only triggers on using declarations and directives.
  - key:             google-global-names-in-headers.HeaderFileExtensions
    value:           hpp
  - key:             google-readability-braces-around-statements.ShortStatementLines
    value:           '1'
  # if function has more than 50 branches, then it prints warning
  - key:             google-readability-function-size.BranchThreshold
    value:           '50'
  # if function has more than 500 lines, then it prints warning
  - key:             google-readability-function-size.LineThreshold
    value:           '500'
  # if function has more than 1000 statements, than it prints warning
  - key:             google-readability-function-size.StatementThreshold
    value:           '1000'
  # Checks that long (>10 lines) namespaces have a closing comment.
  - key:             google-readability-namespace-comments.ShortNamespaceLines
    value:           '10'
  - key:             google-readability-namespace-comments.SpacesBeforeComments
    value:           '2'
  - key:             google-runtime-int.SignedTypePrefix
    value:           int
  - key:             google-runtime-int.TypeSuffix
    value:           ''
  - key:             google-runtime-int.UnsignedTypePrefix
    value:           uint
  - key:             google-runtime-references.WhiteListTypes
    value:           ''
  - key:             modernize-loop-convert.MaxCopySize
    value:           '16'
  - key:             modernize-loop-convert.MinConfidence
    value:           reasonable
  - key:             modernize-loop-convert.NamingStyle
    value:           CamelCase
  - key:             modernize-pass-by-value.IncludeStyle
    value:           google
  - key:             modernize-pass-by-value.ValuesOnly
    value:           '0'
  - key:             modernize-replace-auto-ptr.IncludeStyle
    value:           google
  - key:             modernize-use-default-member-init.UseAssignment
    value:           '0'
  - key:             modernize-use-emplace.ContainersWithPushBack
    value:           '::std::vector;::std::list;::std::deque'
    # TODO(@warchant): do we need to add PolyWrapper here?
  - key:             modernize-use-emplace.SmartPointers
    value:           '::std::shared_ptr;::std::unique_ptr;::std::auto_ptr;::std::weak_ptr'
  - key:             modernize-use-nullptr.NullMacros
    value:           'NULL'
  - key:             modernize-use-transparent-functors.SafeMode
    value:           '0'
  - key:             performance-faster-string-find.StringLikeClasses
    value:           'std::basic_string'
  - key:             performance-for-range-copy.WarnOnAllAutoCopies
    value:           '1'
  - key:             performance-inefficient-string-concatenation.StrictMode
    value:           '1'
  - key:             performance-type-promotion-in-math-fn.IncludeStyle
    value:           google
  - key:             performance-unnecessary-value-param.IncludeStyle
    value:           google
...
